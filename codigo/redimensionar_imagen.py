"""
Script para redimensionar im√°genes de una carpeta ORIGINALES
y guardarlas optimizadas en la carpeta MODIFICADAS

Este script procesa autom√°ticamente todas las im√°genes en formato JPG, JPEG, PNG, BMP,
TIFF, TIF y WEBP de la carpeta ORIGINALES, las redimensiona a 1024px de ancho
manteniendo la proporci√≥n original, y las guarda en la carpeta MODIFICADAS con
optimizaci√≥n para web.

Caracter√≠sticas principales:
- Redimensionado proporcional con ancho fijo de 1024px
- Optimizaci√≥n autom√°tica para web (calidad 85%, JPEG progresivo)
- Conversi√≥n a RGB para compatibilidad
- Informe detallado del procesamiento con estad√≠sticas de reducci√≥n
- Manejo de errores robusto con mensajes descriptivos

Autor: Benito Gonz√°lez Pi√±eiro
Fecha de creaci√≥n: Agosto 2025
Versi√≥n: 1.0
"""

import os
from PIL import Image
import sys

def crear_carpeta_modificadas():
    """
    Crea la carpeta MODIFICADAS si no existe.

    Esta funci√≥n verifica si existe la carpeta 'MODIFICADAS' en el directorio
    actual. Si no existe, la crea autom√°ticamente y muestra un mensaje de
    confirmaci√≥n.

    Returns:
        None

    Side effects:
        - Crea la carpeta 'MODIFICADAS' si no existe
        - Imprime mensaje en consola si se crea la carpeta
    """
    if not os.path.exists("MODIFICADAS"):
        os.makedirs("MODIFICADAS")
        print("Carpeta MODIFICADAS creada")

def es_imagen(archivo):
    """
    Verifica si el archivo es una imagen con extensi√≥n soportada.

    Esta funci√≥n eval√∫a la extensi√≥n del archivo para determinar si es un
    tipo de imagen compatible con el script. Las extensiones v√°lidas incluyen
    formatos comunes de imagen digital.

    Args:
        archivo (str): Nombre del archivo a verificar (con extensi√≥n)

    Returns:
        bool: True si el archivo tiene una extensi√≥n de imagen soportada,
              False en caso contrario

    Extensiones soportadas:
        - .jpg, .jpeg: JPEG/JFIF
        - .png: Portable Network Graphics
        - .bmp: Bitmap
        - .tiff, .tif: Tagged Image File Format
        - .webp: WebP
    """
    extensiones_validas = ('.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.tif', '.webp')
    return archivo.lower().endswith(extensiones_validas)

def redimensionar_imagen(ruta_origen, nombre_archivo):
    """
    Redimensiona una imagen manteniendo la proporci√≥n original.

    Esta funci√≥n toma una imagen de la ruta especificada, la redimensiona a un
    ancho fijo de 1024 p√≠xeles manteniendo la proporci√≥n original, la optimiza
    para web y la guarda en la carpeta MODIFICADAS. Tambi√©n muestra estad√≠sticas
    detalladas del procesamiento.

    Args:
        ruta_origen (str): Ruta completa del archivo de imagen original
        nombre_archivo (str): Nombre del archivo de imagen (sin ruta)

    Returns:
        None

    Caracter√≠sticas del procesamiento:
        - Ancho fijo: 1024 p√≠xeles
        - Alto proporcional calculado autom√°ticamente
        - Conversi√≥n a RGB si es necesario
        - Algoritmo de remuestreo: LANCZOS (alta calidad)
        - Formato de salida: JPEG optimizado
        - Calidad: 85% (balance entre tama√±o y calidad)
        - Optimizaci√≥n: activada
        - JPEG progresivo: activado

    Side effects:
        - Crea archivo en la carpeta MODIFICADAS
        - Imprime informaci√≥n del procesamiento en consola
        - Maneja errores y muestra mensajes descriptivos

    Raises:
        Exception: Si ocurre un error durante el procesamiento de la imagen
    """
    try:
        # Abrir la imagen original
        with Image.open(ruta_origen) as img:
            # Convertir a RGB si es necesario (para PNG con transparencia, etc.)
            if img.mode in ('RGBA', 'LA', 'P'):
                img = img.convert('RGB')
            
            # Obtener dimensiones originales
            ancho_original, alto_original = img.size
            
            # Calcular nuevo alto manteniendo la proporci√≥n
            ancho_nuevo = 1024
            alto_nuevo = int((alto_original * ancho_nuevo) / ancho_original)
            
            # Redimensionar la imagen
            img_redimensionada = img.resize((ancho_nuevo, alto_nuevo), Image.Resampling.LANCZOS)
            
            # Crear nombre del archivo de salida
            nombre_base = os.path.splitext(nombre_archivo)[0]
            nombre_salida = f"{nombre_base}_1024.jpg"
            ruta_salida = os.path.join("MODIFICADAS", nombre_salida)
            
            # Guardar la imagen con calidad reducida para web
            img_redimensionada.save(
                ruta_salida,
                "JPEG",
                quality=85,  # Calidad del 85% - buena para web
                optimize=True,  # Optimiza el archivo
                progressive=True  # JPEG progresivo para carga web
            )
            
            # Mostrar informaci√≥n del procesamiento
            tama√±o_original = os.path.getsize(ruta_origen)
            tama√±o_nuevo = os.path.getsize(ruta_salida)
            reduccion = ((tama√±o_original - tama√±o_nuevo) / tama√±o_original) * 100
            
            print(f"‚úì {nombre_archivo} -> {nombre_salida}")
            print(f"  Dimensiones: {ancho_original}x{alto_original} -> {ancho_nuevo}x{alto_nuevo}")
            print(f"  Tama√±o: {tama√±o_original/1024:.1f}KB -> {tama√±o_nuevo/1024:.1f}KB ({reduccion:.1f}% reducci√≥n)")
            print()
            
    except Exception as e:
        print(f"‚ùå Error procesando {nombre_archivo}: {str(e)}")

def procesar_imagenes():
    """
    Funci√≥n principal que coordina el procesamiento completo de im√°genes.

    Esta funci√≥n orquesta todo el proceso de redimensionado de im√°genes:
    1. Verifica la existencia de la carpeta ORIGINALES
    2. Crea la carpeta MODIFICADAS si no existe
    3. Busca y filtra archivos de imagen v√°lidos
    4. Procesa cada imagen individualmente
    5. Muestra estad√≠sticas del procesamiento completo

    Returns:
        bool: True si el procesamiento se complet√≥ exitosamente,
              False si ocurri√≥ alg√∫n error o no se encontraron im√°genes

    Estructura del proceso:
        - Verificaci√≥n de carpetas
        - Filtrado de archivos por extensi√≥n
        - Procesamiento individual de cada imagen
        - Reporte de estad√≠sticas finales

    Side effects:
        - Imprime mensajes informativos en consola
        - Crea la carpeta MODIFICADAS si no existe
        - Procesa y guarda im√°genes redimensionadas
        - Muestra estad√≠sticas de procesamiento
    """
    # Verificar que existe la carpeta ORIGINALES
    if not os.path.exists("ORIGINALES"):
        print("‚ùå Error: No se encontr√≥ la carpeta 'ORIGINALES'")
        print("Aseg√∫rate de que la carpeta existe y contiene im√°genes")
        return False
    
    # Crear carpeta de destino
    crear_carpeta_modificadas()
    
    # Obtener lista de archivos en ORIGINALES
    archivos = os.listdir("ORIGINALES")
    imagenes = [archivo for archivo in archivos if es_imagen(archivo)]
    
    if not imagenes:
        print("‚ùå No se encontraron im√°genes en la carpeta ORIGINALES")
        print("Formatos soportados: JPG, JPEG, PNG, BMP, TIFF, WEBP")
        return False
    
    print(f"üìÅ Encontradas {len(imagenes)} im√°genes para procesar")
    print("=" * 60)
    
    # Procesar cada imagen
    imagenes_procesadas = 0
    for imagen in imagenes:
        ruta_origen = os.path.join("ORIGINALES", imagen)
        redimensionar_imagen(ruta_origen, imagen)
        imagenes_procesadas += 1
    
    print("=" * 60)
    print(f"‚úÖ Procesamiento completado: {imagenes_procesadas} im√°genes redimensionadas")
    print(f"üìÇ Im√°genes guardadas en la carpeta 'MODIFICADAS'")
    
    return True

if __name__ == "__main__":
    print("üñºÔ∏è  Script de Redimensionado de Im√°genes")
    print("Redimensiona im√°genes a 1024px de ancho manteniendo proporci√≥n")
    print()
    
    # Verificar que PIL est√° instalado
    try:
        from PIL import Image
    except ImportError:
        print("‚ùå Error: La librer√≠a Pillow no est√° instalada")
        print("Inst√°lala con: pip install Pillow")
        sys.exit(1)
    
    # Ejecutar el procesamiento
    if procesar_imagenes():
        print("üéâ ¬°Proceso completado con √©xito!")
    else:
        print("‚ùå El proceso termin√≥ con errores")
        sys.exit(1)
