<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sistema de Detección de Malware con YARA</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 2em;
            color: #333;
        }
        h1, h2 {
            color: #2c3e50;
        }
        h1 {
            border-bottom: 2px solid #3498db;
            padding-bottom: 0.5em;
        }
        h2 {
            margin-top: 1.5em;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: #f9f9f9;
            padding: 2em;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        code, pre {
            background-color: #ecf0f1;
            padding: 2px 6px;
            border-radius: 4px;
            color: #c0392b;
            font-family: "Courier New", Courier, monospace;
        }
        pre {
            padding: 1em;
            overflow-x: auto;
            white-space: pre-wrap;
        }
        ul {
            list-style-type: disc;
            padding-left: 20px;
        }
    </style>
</head>
<body>

<div class="container">
    <h1>Sistema de Detección de Malware con YARA</h1>
    <p>Análisis automatizado de archivos mediante reglas YARA y base de datos MongoDB</p>

    <div class="card">
        <div class="card-body">
            <h2>Código Fuente Completo</h2>
            <pre><code>import yara
import os
import pymongo

# Variables de configuración MongoDB
MONGO_URI = "mongodb://localhost:27017"  # URI de conexión a MongoDB
DB_NAME = "memes"  # Nombre de la base de datos
COLLECTION_NAME = "metadata"  # Nombre de la colección
RUTA_REGLAS = "./reglas"  # Ruta donde se encuentran las reglas YARA

def obtener_archivosde_mongodb():
    listado_archivos = []
    """
    Conecta a MongoDB y obtiene la lista de archivos en la colección.

    Returns:
        list: Lista de archivos en la colección
    """
    client = pymongo.MongoClient(MONGO_URI)
    db = client[DB_NAME]
    collection = db[COLLECTION_NAME]

    # Obtener todos los documentos en la colección
    archivos = list(collection.find({}))

    for archivo in archivos:
        listado_archivos.append(archivo["ruta"])
        print(archivo["ruta"])

    client.close()
    return listado_archivos

def obtener_lista_reglas_yara(ruta):
    lista= []
    for root, dir, filenames in os.walk(ruta):
        for filename in filenames:
            if filename.endswith('.yar') or filename.endswith('.yara'):
                lista.append(os.path.join(root, filename))
    return lista

def scan_file_with_yara(filepath, rules_filepath):
    """
    Escanea un archivo dado utilizando un conjunto de reglas YARA.

    Args:
        filepath (str): La ruta al archivo que se desea escanear.
        rules_filepath (str): La ruta al archivo que contiene las reglas YARA (.yar).

    Returns:
        list: Una lista de objetos Match que representan las reglas que coincidieron.
              Devuelve una lista vacía si no hay coincidencias o si hay un error.
    """
    if not os.path.exists(filepath):
        print(f"Error: El archivo '{filepath}' no existe.")
        return []

    if not os.path.exists(rules_filepath):
        print(f"Error: El archivo de reglas YARA '{rules_filepath}' no existe.")
        return []

    try:
        # Compila las reglas YARA desde el archivo
        rules = yara.compile(filepath=rules_filepath)

        # Escanea el archivo y obtiene las coincidencias
        matches = rules.match(filepath=filepath)

        return matches

    except yara.Error as e:
        print(f"Error al compilar las reglas YARA o al escanear: {e}")
        return []
    except Exception as e:
        print(f"Ocurrió un error inesperado: {e}")
        return []

if __name__ == "__main__":
    archivos_a_escanear = obtener_archivosde_mongodb()

    for archivo_a_escanear in archivos_a_escanear:
        print(f"Escaneando archivo: {archivo_a_escanear}")
        rules_files = obtener_lista_reglas_yara(RUTA_REGLAS)

        for rule in rules_files:
            #print(f"Escaneando {archivo_a_escanear} con reglas {rule}")
            results = scan_file_with_yara(archivo_a_escanear, rule)

            if results:
                print(f"¡Malware detectado en '{archivo_a_escanear}' con la regla '{rule}'!")
                for match in results:
                    print(f"  - Regla: {match.rule}")
                    print(f"  - Meta: {match.meta}")
                    print(f"  - Cadenas coincidentes: {match.strings}")
            else:
                #print(f"No se detectó malware en '{archivo_a_escanear}' con la regla '{rule}'.")
                pass

    print("Escaneo completado.")</code></pre>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <h2>Funcionalidad del Sistema</h2>
            <p><strong>Descripción General:</strong> Este script implementa un sistema automatizado de detección de malware que utiliza el motor de análisis YARA para escanear archivos almacenados en una base de datos MongoDB.</p>

            <h3>obtener_archivosde_mongodb()</h3>
            <ul>
                <li>Conecta con la base de datos MongoDB</li>
                <li>Obtiene la lista de rutas de archivos desde la colección 'metadata'</li>
                <li>Retorna una lista con las rutas de todos los archivos</li>
            </ul>

            <h3>obtener_lista_reglas_yara()</h3>
            <ul>
                <li>Escanea recursivamente el directorio de reglas</li>
                <li>Identifica archivos con extensiones .yar y .yara</li>
                <li>Retorna una lista con todas las reglas disponibles</li>
            </ul>

            <h3>scan_file_with_yara()</h3>
            <p>Función principal de análisis que:</p>
            <ul>
                <li>Valida la existencia del archivo objetivo</li>
                <li>Verifica la disponibilidad de las reglas YARA</li>
                <li>Compila las reglas YARA dinámicamente</li>
                <li>Ejecuta el análisis del archivo</li>
                <li>Gestiona errores de compilación y ejecución</li>
                <li>Retorna los resultados de coincidencias</li>
            </ul>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <h2>Tecnologías Empleadas</h2>

            <h3>Python 3.x</h3>
            <p>Lenguaje de programación principal del sistema</p>

            <h3>YARA Engine</h3>
            <p>Motor de análisis de malware mediante patrones y reglas</p>

            <h3>MongoDB</h3>
            <p>Base de datos NoSQL para almacenar metadatos de archivos</p>

            <h3>Dependencias del Sistema:</h3>
            <ul>
                <li><code>pip install yara-python</code> - Motor YARA para Python</li>
                <li><code>pip install pymongo</code> - Cliente MongoDB para Python</li>
                <li><code>import os</code> - Biblioteca estándar de Python</li>
            </ul>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <h2>Flujo de Trabajo del Sistema</h2>

            <h3>1. Inicialización del Sistema</h3>
            <p>El script establece la conexión con MongoDB usando la URI configurada y define las rutas de trabajo.</p>

            <h3>2. Obtención de Archivos</h3>
            <p>Se consulta la colección 'metadata' en la base de datos 'memes' para obtener la lista de archivos a analizar.</p>

            <h3>3. Carga de Reglas YARA</h3>
            <p>El sistema escanea recursivamente el directorio './reglas' buscando archivos .yar y .yara.</p>

            <h3>4. Análisis Cruzado</h3>
            <p>Cada archivo se analiza contra todas las reglas YARA disponibles de forma sistemática.</p>

            <h3>5. Detección y Reporte</h3>
            <p>Si se detecta malware, se muestran los detalles de la regla coincidente, metadatos y cadenas detectadas.</p>

            <h3>6. Finalización</h3>
            <p>Una vez completado el análisis de todos los archivos, el sistema muestra un mensaje de confirmación.</p>

            <h3>Características de Seguridad:</h3>
            <ul>
                <li><strong>Validación de Archivos:</strong> Verifica la existencia de archivos antes del análisis</li>
                <li><strong>Gestión de Errores:</strong> Captura excepciones de YARA y errores generales</li>
                <li><strong>Análisis Exhaustivo:</strong> Cada archivo se evalúa contra múltiples reglas</li>
                <li><strong>Reporte Detallado:</strong> Proporciona información específica sobre cada detección</li>
            </ul>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <h2>Configuración y Uso</h2>

            <h3>Configuración</h3>
            <ul>
                <li><code>MONGO_URI</code>: URI de conexión a MongoDB</li>
                <li><code>DB_NAME</code>: Base de datos "memes"</li>
                <li><code>COLLECTION_NAME</code>: Colección "metadata"</li>
                <li><code>RUTA_REGLAS</code>: Directorio "./reglas"</li>
            </ul>

            <h3>Ejecución</h3>
            <pre><code>python malware_scanner.py</code></pre>
            <p>El script se ejecuta automáticamente al ser invocado, realizando un análisis completo de todos los archivos registrados en MongoDB.</p>
        </div>
    </div>

    <footer style="text-align: center; margin-top: 2em; padding-top: 1em; border-top: 1px solid #ccc;">
        <p><a href="./pildoras.html">Volver a la página principal de píldoras</a></p>
    </footer>
</div>
</body>
</html>
